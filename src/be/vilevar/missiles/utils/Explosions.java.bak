package be.vilevar.missiles.utils;

import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Random;

import javax.annotation.Nullable;

import org.bukkit.Location;
import org.bukkit.block.Block;
import org.bukkit.craftbukkit.v1_12_R1.event.CraftEventFactory;
import org.bukkit.event.block.BlockExplodeEvent;
import org.bukkit.event.entity.EntityExplodeEvent;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.common.collect.Sets;

import net.minecraft.server.v1_12_R1.AxisAlignedBB;
import net.minecraft.server.v1_12_R1.BlockPosition;
import net.minecraft.server.v1_12_R1.Blocks;
import net.minecraft.server.v1_12_R1.DamageSource;
import net.minecraft.server.v1_12_R1.EnchantmentProtection;
import net.minecraft.server.v1_12_R1.Entity;
import net.minecraft.server.v1_12_R1.EntityFallingBlock;
import net.minecraft.server.v1_12_R1.EntityFireball;
import net.minecraft.server.v1_12_R1.EntityHuman;
import net.minecraft.server.v1_12_R1.EntityLiving;
import net.minecraft.server.v1_12_R1.EntityTNTPrimed;
import net.minecraft.server.v1_12_R1.EnumParticle;
import net.minecraft.server.v1_12_R1.IBlockData;
import net.minecraft.server.v1_12_R1.Material;
import net.minecraft.server.v1_12_R1.MathHelper;
import net.minecraft.server.v1_12_R1.SoundCategory;
import net.minecraft.server.v1_12_R1.SoundEffects;
import net.minecraft.server.v1_12_R1.Vec3D;
import net.minecraft.server.v1_12_R1.World;
import net.minecraft.server.v1_12_R1.WorldServer;

public class Explosions {

	private final boolean a;
	private final boolean b;
	private final Random c = new Random();
	private final World world;
	private final double posX;
	private final double posY;
	private final double posZ;
	public final Entity source;
	private final float size;
	private final List<BlockPosition> blocks = Lists.newArrayList();
	private final Map<EntityHuman, Vec3D> k = Maps.newHashMap();
	public boolean wasCanceled = false;

	public Explosions(World world, double d0, double d1, double d2, float f, boolean flag, boolean flag1) {
		this.world = world;
		this.source = null;
		this.size = (float) Math.max((double) f, 0.0D);
		this.posX = d0;
		this.posY = d1;
		this.posZ = d2;
		this.a = flag;
		this.b = flag1;
	}

	public void doExplosionA() {
		if (this.size >= 0.1F) {
			
			HashSet<BlockPosition> hashset = Sets.newHashSet();

			int i;
			int j;
			
			for (int k = 0; k < 16; ++k) {
				for (i = 0; i < 16; ++i) {
					for (j = 0; j < 16; ++j) {
						
						if (k == 0 || k == 15 || i == 0 || i == 15 || j == 0 || j == 15) {
							
							double x = (float) k / 15 * 2 - 1;
							double y = (float) i / 15 * 2 - 1;
							double z = (float) j / 15 * 2 - 1;
							double length = Math.sqrt(x * x + y * y + z * z);
							x /= length;
							y /= length;
							z /= length;
							
							float deflagration = this.size * (0.7F + this.world.random.nextFloat() * 0.6F);
							
							double pX = this.posX;
							double pY = this.posY;

							for (double pZ = this.posZ; deflagration > 0.0F; deflagration -= 0.22500001F) {
								
								BlockPosition blockposition = new BlockPosition(pX, pY, pZ);
								IBlockData iblockdata = this.world.getType(blockposition);
								
								if (iblockdata.getMaterial() != Material.AIR) {
									float f2 = iblockdata.getBlock().a((Entity) null);
									deflagration -= (f2 + 0.3F) * 0.3F;
								}

								if (deflagration > 0.0F && blockposition.getY() < 256 && blockposition.getY() >= 0) {
									hashset.add(blockposition);
								}

								pX += x * 0.30000001192092896D;
								pY += y * 0.30000001192092896D;
								pZ += z * 0.30000001192092896D;
							}
						}
					}
				}
			}

			this.blocks.addAll(hashset);
			float f3 = this.size * 2.0F;
			i = MathHelper.floor(this.posX - (double) f3 - 1.0D);
			j = MathHelper.floor(this.posX + (double) f3 + 1.0D);
			int l = MathHelper.floor(this.posY - (double) f3 - 1.0D);
			int i1 = MathHelper.floor(this.posY + (double) f3 + 1.0D);
			int j1 = MathHelper.floor(this.posZ - (double) f3 - 1.0D);
			int k1 = MathHelper.floor(this.posZ + (double) f3 + 1.0D);
			List<Entity> list = this.world.getEntities(this.source,
					new AxisAlignedBB((double) i, (double) l, (double) j1, (double) j, (double) i1, (double) k1));
			Vec3D vec3d = new Vec3D(this.posX, this.posY, this.posZ);

			for (int l1 = 0; l1 < list.size(); ++l1) {
				Entity entity = (Entity) list.get(l1);
				if (!entity.bB()) {
					double d7 = entity.e(this.posX, this.posY, this.posZ) / (double) f3;
					if (d7 <= 1.0D) {
						double d8 = entity.locX - this.posX;
						double d9 = entity.locY + (double) entity.getHeadHeight() - this.posY;
						double d10 = entity.locZ - this.posZ;
						double d11 = (double) MathHelper.sqrt(d8 * d8 + d9 * d9 + d10 * d10);
						if (d11 != 0.0D) {
							d8 /= d11;
							d9 /= d11;
							d10 /= d11;
							double d12 = (double) this.world.a(vec3d, entity.getBoundingBox());
							double d13 = (1.0D - d7) * d12;
							CraftEventFactory.entityDamage = this.source;
							entity.forceExplosionKnockback = false;
							boolean wasDamaged = entity.damageEntity(DamageSource.explosion(this),
									(float) ((int) ((d13 * d13 + d13) / 2.0D * 7.0D * (double) f3 + 1.0D)));
							CraftEventFactory.entityDamage = null;
							if (wasDamaged || entity instanceof EntityTNTPrimed || entity instanceof EntityFallingBlock
									|| entity.forceExplosionKnockback) {
								double d14 = d13;
								if (entity instanceof EntityLiving) {
									d14 = EnchantmentProtection.a((EntityLiving) entity, d13);
								}

								entity.motX += d8 * d14;
								entity.motY += d9 * d14;
								entity.motZ += d10 * d14;
								if (entity instanceof EntityHuman) {
									EntityHuman entityhuman = (EntityHuman) entity;
									if (!entityhuman.isSpectator()
											&& (!entityhuman.z() || !entityhuman.abilities.isFlying)) {
										this.k.put(entityhuman, new Vec3D(d8 * d13, d9 * d13, d10 * d13));
									}
								}
							}
						}
					}
				}
			}

		}
	}

	public void doExplosionB(boolean flag) {
		this.world.a((EntityHuman) null, this.posX, this.posY, this.posZ, SoundEffects.bV, SoundCategory.BLOCKS, 4.0F,
				(1.0F + (this.world.random.nextFloat() - this.world.random.nextFloat()) * 0.2F) * 0.7F);
		if (this.size >= 2.0F && this.b) {
			this.world.addParticle(EnumParticle.EXPLOSION_HUGE, this.posX, this.posY, this.posZ, 1.0D, 0.0D, 0.0D,
					new int[0]);
		} else {
			this.world.addParticle(EnumParticle.EXPLOSION_LARGE, this.posX, this.posY, this.posZ, 1.0D, 0.0D, 0.0D,
					new int[0]);
		}

		Iterator<BlockPosition> iterator;
		BlockPosition blockposition;
		if (this.b) {
			org.bukkit.World bworld = this.world.getWorld();
			org.bukkit.entity.Entity explode = this.source == null ? null : this.source.getBukkitEntity();
			Location location = new Location(bworld, this.posX, this.posY, this.posZ);
			List<Block> blockList = Lists.newArrayList();

			for (int i1 = this.blocks.size() - 1; i1 >= 0; --i1) {
				BlockPosition cpos = (BlockPosition) this.blocks.get(i1);
				Block bblock = bworld.getBlockAt(cpos.getX(), cpos.getY(), cpos.getZ());
				if (bblock.getType() != org.bukkit.Material.AIR) {
					blockList.add(bblock);
				}
			}

			boolean cancelled;
			List<Block> bukkitBlocks;
			float yield;
			if (explode != null) {
				EntityExplodeEvent event = new EntityExplodeEvent(explode, location, blockList, 1.0F / this.size);
				this.world.getServer().getPluginManager().callEvent(event);
				cancelled = event.isCancelled();
				bukkitBlocks = event.blockList();
				yield = event.getYield();
			} else {
				BlockExplodeEvent event = new BlockExplodeEvent(location.getBlock(), blockList, 1.0F / this.size);
				this.world.getServer().getPluginManager().callEvent(event);
				cancelled = event.isCancelled();
				bukkitBlocks = event.blockList();
				yield = event.getYield();
			}

			this.blocks.clear();
			Iterator<Block> var10 = bukkitBlocks.iterator();

			while (var10.hasNext()) {
				Block bblock = (Block) var10.next();
				BlockPosition coords = new BlockPosition(bblock.getX(), bblock.getY(), bblock.getZ());
				this.blocks.add(coords);
			}

			if (cancelled) {
				this.wasCanceled = true;
				return;
			}

			iterator = this.blocks.iterator();

			while (iterator.hasNext()) {
				blockposition = (BlockPosition) iterator.next();
				IBlockData iblockdata = this.world.getType(blockposition);
				net.minecraft.server.v1_12_R1.Block block = iblockdata.getBlock();
				if (flag) {
					double d0 = (double) ((float) blockposition.getX() + this.world.random.nextFloat());
					double d1 = (double) ((float) blockposition.getY() + this.world.random.nextFloat());
					double d2 = (double) ((float) blockposition.getZ() + this.world.random.nextFloat());
					double d3 = d0 - this.posX;
					double d4 = d1 - this.posY;
					double d5 = d2 - this.posZ;
					double d6 = (double) MathHelper.sqrt(d3 * d3 + d4 * d4 + d5 * d5);
					d3 /= d6;
					d4 /= d6;
					d5 /= d6;
					double d7 = 0.5D / (d6 / (double) this.size + 0.1D);
					d7 *= (double) (this.world.random.nextFloat() * this.world.random.nextFloat() + 0.3F);
					d3 *= d7;
					d4 *= d7;
					d5 *= d7;
					this.world.addParticle(EnumParticle.EXPLOSION_NORMAL, (d0 + this.posX) / 2.0D,
							(d1 + this.posY) / 2.0D, (d2 + this.posZ) / 2.0D, d3, d4, d5, new int[0]);
					this.world.addParticle(EnumParticle.SMOKE_NORMAL, d0, d1, d2, d3, d4, d5, new int[0]);
				}

				if (iblockdata.getMaterial() != Material.AIR) {
					if (block.a(this)) {
						block.dropNaturally(this.world, blockposition, this.world.getType(blockposition), yield, 0);
					}

					this.world.setTypeAndData(blockposition, Blocks.AIR.getBlockData(), 3);
					block.wasExploded(this.world, blockposition, this);
				}
			}
		}

		if (this.a) {
			iterator = this.blocks.iterator();

			while (iterator.hasNext()) {
				blockposition = (BlockPosition) iterator.next();
				if (this.world.getType(blockposition).getMaterial() == Material.AIR
						&& this.world.getType(blockposition.down()).b() && this.c.nextInt(3) == 0
						&& !CraftEventFactory.callBlockIgniteEvent(this.world, blockposition.getX(),
								blockposition.getY(), blockposition.getZ(), this).isCancelled()) {
					this.world.setTypeUpdate(blockposition, Blocks.FIRE.getBlockData());
				}
			}
		}

	}

	public Map<EntityHuman, Vec3D> b() {
		return this.k;
	}

	@Nullable
	public EntityLiving getSource() {
		return this.source == null ? null
				: (this.source instanceof EntityTNTPrimed ? ((EntityTNTPrimed) this.source).getSource()
						: (this.source instanceof EntityLiving ? (EntityLiving) this.source
								: (this.source instanceof EntityFireball ? ((EntityFireball) this.source).shooter
										: null)));
	}

	public void clearBlocks() {
		this.blocks.clear();
	}

	public List<BlockPosition> getBlocks() {
		return this.blocks;
	}
}
